"""Unit tests for the vulnerability scanner"""

import json
from datetime import datetime
from pathlib import Path
from unittest.mock import MagicMock, Mock, patch

import pytest

from utils.vulnerability_scanner import VulnerabilityScanner


class TestVulnerabilityScanner:
    """Test vulnerability scanner functionality"""

    @pytest.fixture
    def scanner(self, tmp_path):
        """Create a vulnerability scanner instance"""
        return VulnerabilityScanner(cache_dir=tmp_path / "cache")

    @pytest.fixture
    def sample_device(self):
        """Sample device for testing"""
        return {
            "ip": "192.168.1.10",
            "hostname": "test-server",
            "services": ["http:80 (Apache 2.4.41)", "ssh:22 (OpenSSH 7.4)"],
            "open_ports": [80, 22],
            "type": "web_server",
        }

    def test_init(self, scanner):
        """Test scanner initialization"""
        assert scanner.cache_dir.exists()
        assert "osv" in scanner.apis
        assert "circl" in scanner.apis
        assert scanner.request_interval == 2

    def test_scan_devices_empty(self, scanner):
        """Test scanning empty device list"""
        result = scanner.scan_devices([])
        assert result == []

    def test_scan_devices_with_vulnerabilities(self, scanner, sample_device):
        """Test scanning devices returns vulnerability data"""
        # Mock the scan method to return local vulnerabilities
        with patch.object(scanner, "_scan_device_services") as mock_scan:
            mock_scan.return_value = [
                {"cve_id": "LOCAL-HTTP-001", "severity": "MEDIUM", "cvss_score": 5.3}
            ]

            devices = [sample_device]
            result = scanner.scan_devices(devices)

            assert len(result) == 1
            assert result[0]["vulnerability_count"] == 1
            assert result[0]["critical_vulns"] == 0
            assert result[0]["high_vulns"] == 0
            assert "vulnerabilities" in result[0]

    def test_scan_device_services_no_services(self, scanner):
        """Test scanning device with no services"""
        device = {"ip": "192.168.1.1", "services": []}
        result = scanner._scan_device_services(device)
        assert result == []

    def test_parse_service_string(self, scanner):
        """Test service string parsing"""
        # Test with version
        service, version = scanner._parse_service_string("http:80 (Apache 2.4.41)")
        assert service == "http"
        assert version == "2.4.41"

        # Test without version
        service, version = scanner._parse_service_string("ssh:22")
        assert service == "ssh"
        assert version == "unknown"

        # Test invalid string
        result = scanner._parse_service_string("invalid")
        assert result == ("invalid", "unknown")

    def test_get_service_keywords(self, scanner):
        """Test service keyword lookup"""
        keywords = scanner._get_service_keywords("apache")
        assert "apache" in keywords
        assert "httpd" in keywords

        keywords = scanner._get_service_keywords("unknown")
        assert keywords == ["unknown"]

    def test_severity_to_score(self, scanner):
        """Test severity to CVSS score conversion"""
        assert scanner._severity_to_score("CRITICAL") == 9.0
        assert scanner._severity_to_score("HIGH") == 7.5
        assert scanner._severity_to_score("MEDIUM") == 5.0
        assert scanner._severity_to_score("LOW") == 2.5
        assert scanner._severity_to_score("UNKNOWN") == 0.0

    def test_score_to_severity(self, scanner):
        """Test CVSS score to severity conversion"""
        assert scanner._score_to_severity(9.5) == "CRITICAL"
        assert scanner._score_to_severity(7.5) == "HIGH"
        assert scanner._score_to_severity(5.0) == "MEDIUM"
        assert scanner._score_to_severity(2.0) == "LOW"

    def test_calculate_relevance(self, scanner):
        """Test relevance score calculation"""
        description = "Apache HTTP Server vulnerability allows remote code execution"
        score = scanner._calculate_relevance(description, "apache", "2.4.41")
        assert score > 0.5  # Should have high relevance

        score = scanner._calculate_relevance("Unrelated vulnerability", "apache", "2.4.41")
        assert score < 0.5  # Should have low relevance

    @patch("requests.post")
    def test_query_osv_api_success(self, mock_post, scanner):
        """Test successful OSV API query"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "vulns": [
                {
                    "id": "OSV-2023-001",
                    "summary": "Test vulnerability",
                    "severity": [{"type": "CVSS_V3", "score": 7.5}],
                }
            ]
        }
        mock_post.return_value = mock_response

        result = scanner._query_osv_api("apache", "2.4.41")
        assert len(result) == 1
        assert result[0]["cve_id"] == "OSV-2023-001"
        assert result[0]["severity"] == "HIGH"

    @patch("requests.get")
    def test_query_circl_api_success(self, mock_get, scanner):
        """Test successful CIRCL API query"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = [
            {"id": "CVE-2023-001", "summary": "Test CVE", "cvss": 5.5, "Published": "2023-01-01"}
        ]
        mock_get.return_value = mock_response

        result = scanner._query_circl_api("apache")
        assert len(result) == 1
        assert result[0]["cve_id"] == "CVE-2023-001"
        assert result[0]["cvss_score"] == 5.5

    def test_get_local_vulnerabilities(self, scanner, sample_device):
        """Test local vulnerability patterns"""
        device = {
            "ip": "192.168.1.1",
            "services": ["telnet:23", "http:80"],
            "open_ports": [23, 80, 161],  # Include SNMP port
        }

        result = scanner._get_local_vulnerabilities(device)
        assert len(result) >= 2  # Should find telnet and http vulnerabilities

        # Check for specific vulnerabilities
        cve_ids = [v["cve_id"] for v in result]
        assert "LOCAL-TELNET-001" in cve_ids
        assert "LOCAL-HTTP-001" in cve_ids

        # Check telnet is marked as high severity
        telnet_vuln = next(v for v in result if v["cve_id"] == "LOCAL-TELNET-001")
        assert telnet_vuln["severity"] == "HIGH"

    def test_cache_operations(self, scanner, tmp_path):
        """Test cache save and load operations"""
        cache_file = scanner._get_cache_file("apache", "2.4.41")
        test_vulns = [{"cve_id": "TEST-001", "severity": "HIGH"}]

        # Save to cache
        scanner._save_to_cache(cache_file, test_vulns)
        assert cache_file.exists()

        # Load from cache
        loaded = scanner._load_from_cache(cache_file)
        assert loaded == test_vulns

        # Test stale cache (modify time to be old)
        import os
        import time

        old_time = time.time() - (25 * 60 * 60)  # 25 hours ago
        os.utime(cache_file, (old_time, old_time))
        loaded = scanner._load_from_cache(cache_file)
        assert loaded is None  # Should return None for stale cache

    def test_generate_vulnerability_report(self, scanner):
        """Test vulnerability report generation"""
        devices = [
            {
                "ip": "192.168.1.1",
                "vulnerability_count": 3,
                "critical_vulns": 1,
                "high_vulns": 1,
                "vulnerabilities": [
                    {"cve_id": "CVE-001", "severity": "CRITICAL", "cvss_score": 9.0},
                    {"cve_id": "CVE-002", "severity": "HIGH", "cvss_score": 7.0},
                    {"cve_id": "CVE-003", "severity": "MEDIUM", "cvss_score": 5.0},
                ],
            },
            {
                "ip": "192.168.1.2",
                "vulnerability_count": 0,
                "critical_vulns": 0,
                "high_vulns": 0,
                "vulnerabilities": [],
            },
        ]

        report = scanner.generate_vulnerability_report(devices)

        assert report["total_devices"] == 2
        assert report["vulnerable_devices"] == 1
        assert report["total_vulnerabilities"] == 3
        assert report["critical_vulnerabilities"] == 1
        assert report["high_vulnerabilities"] == 1
        assert len(report["top_vulnerabilities"]) == 3
        assert "severity_distribution" in report
        assert report["severity_distribution"]["CRITICAL"] == 1

    def test_error_handling(self, scanner, sample_device):
        """Test error handling in vulnerability scanning"""
        # Test with device that causes exception
        with patch.object(scanner, "_scan_device_services", side_effect=Exception("Test error")):
            devices = [sample_device]
            result = scanner.scan_devices(devices)

            # Should still return device with empty vulnerabilities
            assert len(result) == 1
            assert result[0]["vulnerability_count"] == 0
            assert result[0]["vulnerabilities"] == []
